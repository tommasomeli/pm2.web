import { Flex, Switch, Paper, Text, Group, Tooltip } from "@mantine/core";
import { ISetting, IProcess } from "@pm2.web/typings";
import { InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";

import { SelectedProvider, useSelected } from "@/components/context/SelectedProvider";
import { Dashboard } from "@/components/layouts/Dashboard";
import ProcessItem from "@/components/process/ProcessItem";
import ProcessCluster from "@/components/process/ProcessCluster";
import { getServerSideHelpers } from "@/server/helpers";
import { trpc } from "@/utils/trpc";

function Process({ settings }: { settings: ISetting }) {
  const { selectedProcesses } = useSelected();
  const [clusterViewEnabled, setClusterViewEnabled] = useState(true);

  // Load cluster view preference from localStorage on mount
  useEffect(() => {
    const savedPreference = localStorage.getItem('pm2-cluster-view-enabled');
    if (savedPreference !== null) {
      setClusterViewEnabled(JSON.parse(savedPreference));
    }
  }, []);

  // Save cluster view preference to localStorage when it changes
  const handleToggleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = event.currentTarget.checked;
    setClusterViewEnabled(newValue);
    localStorage.setItem('pm2-cluster-view-enabled', JSON.stringify(newValue));
  };

  // Group processes by name (cluster support) - only if cluster view is enabled
  const processGroups = clusterViewEnabled 
    ? selectedProcesses?.reduce((groups: { [key: string]: IProcess[] }, process) => {
        const key = process.name;
        if (!groups[key]) {
          groups[key] = [];
        }
        groups[key].push(process);
        return groups;
      }, {}) || {}
    : {};

  return (
    <Flex gap="xs" direction={"column"}>
      {/* Cluster View Toggle */}
      <Paper p="sm" radius="md" shadow="xs">
        <Group justify="space-between" align="center">
          <div>
            <Text size="sm" fw={500}>Cluster View</Text>
            <Text size="xs" c="dimmed">
              {clusterViewEnabled 
                ? "Group processes in the same cluster" 
                : "Show each process separately"
              }
            </Text>
          </div>
          <Tooltip 
            label={clusterViewEnabled 
              ? "Disable to see each process separately" 
              : "Enable to group processes in the same cluster"
            }
            position="left"
          >
            <Switch
              checked={clusterViewEnabled}
              onChange={handleToggleChange}
              size="md"
              color="teal"
            />
          </Tooltip>
        </Group>
      </Paper>

      {/* Process Display */}
      {clusterViewEnabled ? (
        // Cluster view: group processes by name
        Object.entries(processGroups).map(([clusterName, processes]) => {
          // If there's only one process, show individual ProcessItem
          if (processes.length === 1) {
            return <ProcessItem process={processes[0]} key={processes[0]._id} setting={settings} />;
          }
          // If there are multiple processes with same name, show as cluster
          return (
            <ProcessCluster 
              key={`cluster-${clusterName}`}
              processes={processes}
              clusterName={clusterName}
              setting={settings}
            />
          );
        })
      ) : (
        // Individual view: show each process separately
        selectedProcesses?.map((process) => (
          <ProcessItem 
            key={process._id} 
            process={process} 
            setting={settings} 
          />
        ))
      )}
    </Flex>
  );
}

export default function ProcessPage({}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const dashboardQuery = trpc.server.getDashBoardData.useQuery(undefined, {
    refetchInterval: (query) => {
      const data = query.state.data;
      const polling = data?.settings?.polling?.frontend || 0;
      return Math.min(Math.max(polling, 4000), 10_000);
    },
  });
  const data = dashboardQuery.data!;

  if (dashboardQuery.status !== "success") {
    return <></>;
  }

  return (
    <>
      <Head>
        <title>pm2.web</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/png" href="/logo.png" />
      </Head>
      <SelectedProvider servers={data.servers}>
        <Dashboard>
          <Process settings={data.settings} />
        </Dashboard>
      </SelectedProvider>
    </>
  );
}

export async function getServerSideProps() {
  const helpers = await getServerSideHelpers();

  await helpers.server.getDashBoardData.prefetch();

  return {
    props: {
      trpcState: helpers.dehydrate(),
    },
  };
}
